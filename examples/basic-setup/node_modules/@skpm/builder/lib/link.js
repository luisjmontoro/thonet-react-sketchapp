#!/usr/bin/env node
'use strict';

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _mkdirp = require('mkdirp');

var _mkdirp2 = _interopRequireDefault(_mkdirp);

var _path = require('path');

var _yargs = require('yargs');

var _yargs2 = _interopRequireDefault(_yargs);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _semver = require('semver');

var _semver2 = _interopRequireDefault(_semver);

var _toolConfig = require('@skpm/utils/tool-config');

var _skpmConfig = require('@skpm/utils/skpm-config');

var _skpmConfig2 = _interopRequireDefault(_skpmConfig);

var _exec = require('@skpm/utils/exec');

var _getSketchVersion = require('@skpm/utils/getSketchVersion');

var _getSketchVersion2 = _interopRequireDefault(_getSketchVersion);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _getConfig = (0, _toolConfig.get)();

const pluginDirectory = _getConfig.pluginDirectory;


function testDevMode() {
  const command = (action, value) => `/usr/bin/defaults ${action} ~/Library/Preferences/com.bohemiancoding.sketch3.plist AlwaysReloadScript ${value}`;

  return (0, _exec.exec)(command('read', ''), { encoding: 'utf8' }).then(({ stdout }) => {
    const enabled = (stdout || '').trim() === '1';

    if (!enabled) {
      const yesno = require('yesno');
      console.log(`The Sketch developer mode is not enabled ${_chalk2.default.dim('(http://developer.sketchapp.com/introduction/preferences/#always-reload-scripts-before-running)')}.`);
      return new Promise((resolve, reject) => {
        yesno.ask('Do you want to enable it? (y/N)', false, ok => {
          if (ok) {
            (0, _exec.exec)(command('write', '-bool YES')).then(resolve).catch(reject);
          } else {
            resolve();
          }
        });
      });
    }

    return 'Already enabled';
  });
}

var _yargs$help$strict$us = _yargs2.default.help().strict().usage('Usage: cd path/to/my/plugin && skpm-link');

const argv = _yargs$help$strict$us.argv;


const path = argv.$1 || '.';

if (path.indexOf(pluginDirectory) !== -1) {
  console.error(`${_chalk2.default.red('error')} The path should be the one pointing to your new plugin folder, not the sketch plugins folder`);
  process.exit(1);
}

function getPath(file) {
  return path[0] === '/' ? (0, _path.join)(path, file) // absolute path
  : (0, _path.join)(process.cwd(), path, file); // relative path
}

let packageJSON;
try {
  packageJSON = require(getPath('package.json'));
} catch (err) {
  console.error(`${_chalk2.default.red('error')} Error while reading the package.json file`);
  console.error(err);
  process.exit(1);
}

const skpmConfig = (0, _skpmConfig2.default)(packageJSON);

if (!skpmConfig.main) {
  console.error(`${_chalk2.default.red('error')} Missing "skpm.main" fields in the package.json. Should point to the ".sketchplugin" file`);
  process.exit(1);
}

if (!skpmConfig.name) {
  console.error(`${_chalk2.default.red('error')} Missing "name" field in the package.json.`);
  process.exit(1);
}

console.log(`${_chalk2.default.dim('[1/1]')} ðŸ”—  Symlinking the plugin ${skpmConfig.name}...`);

try {
  // Create the encompassing directory if it doesn't already exist
  if (!_fs2.default.existsSync((0, _path.join)(pluginDirectory, skpmConfig.name))) {
    _mkdirp2.default.sync((0, _path.join)(pluginDirectory, skpmConfig.name));
  }

  // Show an error if this symlink already exists
  if (_fs2.default.existsSync((0, _path.join)(pluginDirectory, skpmConfig.name, skpmConfig.main))) {
    console.log(`${_chalk2.default.yellow('warning')} This plugin has already been linked.`);
    process.exit(0);
  }

  // Create the symlink within the encompassing directory
  _fs2.default.symlinkSync(getPath(skpmConfig.main), (0, _path.join)(pluginDirectory, skpmConfig.name, skpmConfig.main));

  console.log(`${_chalk2.default.green('success')} Plugin ${skpmConfig.name} symlinked`);
  console.log(`${_chalk2.default.blue(skpmConfig.name)} - ${_chalk2.default.grey(skpmConfig.version)}`);

  testDevMode().then(_getSketchVersion2.default).then(sketchVersion => {
    if (sketchVersion && _semver2.default.gte(sketchVersion, '45.0.0')) {
      console.log();
      console.log(`${_chalk2.default.yellow('warning')} Starting with Sketch 45, you may need to restart Sketch for your plugin to appear in the "Plugins" menu`);
      console.log();
    }
    process.exit(0);
  }).catch(err => {
    console.log(`${_chalk2.default.red('error')} Error while enabling the Sketch developer mode.`);
    console.log((err || {}).body || err);
    console.log(`${_chalk2.default.blue('info')} Continuing...`);
    process.exit(0);
  });
} catch (err) {
  console.log(`${_chalk2.default.red('error')} Error while symlinking the plugin ${skpmConfig.name}`);
  console.log((err || {}).body || err);
  process.exit(1);
}